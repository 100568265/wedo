#include "..//include//CModbusRTU.h"

static const ST_UINT m_crc16_table[256]=
{
	0x0000,0xC0C1,0xC181,0x0140,0xC301,0x03C0,0x0280,0xC241,
	0xC601,0x06C0,0x0780,0xC741,0x0500,0xC5C1,0xC481,0x0440,
	0xCC01,0x0CC0,0x0D80,0xCD41,0x0F00,0xCFC1,0xCE81,0x0E40,
	0x0A00,0xCAC1,0xCB81,0x0B40,0xC901,0x09C0,0x0880,0xC841,
	0xD801,0x18C0,0x1980,0xD941,0x1B00,0xDBC1,0xDA81,0x1A40,
	0x1E00,0xDEC1,0xDF81,0x1F40,0xDD01,0x1DC0,0x1C80,0xDC41,
	0x1400,0xD4C1,0xD581,0x1540,0xD701,0x17C0,0x1680,0xD641,
	0xD201,0x12C0,0x1380,0xD341,0x1100,0xD1C1,0xD081,0x1040,
	0xF001,0x30C0,0x3180,0xF141,0x3300,0xF3C1,0xF281,0x3240,
	0x3600,0xF6C1,0xF781,0x3740,0xF501,0x35C0,0x3480,0xF441,
	0x3C00,0xFCC1,0xFD81,0x3D40,0xFF01,0x3FC0,0x3E80,0xFE41,
	0xFA01,0x3AC0,0x3B80,0xFB41,0x3900,0xF9C1,0xF881,0x3840,
	0x2800,0xE8C1,0xE981,0x2940,0xEB01,0x2BC0,0x2A80,0xEA41,
	0xEE01,0x2EC0,0x2F80,0xEF41,0x2D00,0xEDC1,0xEC81,0x2C40,
	0xE401,0x24C0,0x2580,0xE541,0x2700,0xE7C1,0xE681,0x2640,
	0x2200,0xE2C1,0xE381,0x2340,0xE101,0x21C0,0x2080,0xE041,
	0xA001,0x60C0,0x6180,0xA141,0x6300,0xA3C1,0xA281,0x6240,
	0x6600,0xA6C1,0xA781,0x6740,0xA501,0x65C0,0x6480,0xA441,
	0x6C00,0xACC1,0xAD81,0x6D40,0xAF01,0x6FC0,0x6E80,0xAE41,
	0xAA01,0x6AC0,0x6B80,0xAB41,0x6900,0xA9C1,0xA881,0x6840,
	0x7800,0xB8C1,0xB981,0x7940,0xBB01,0x7BC0,0x7A80,0xBA41,
	0xBE01,0x7EC0,0x7F80,0xBF41,0x7D00,0xBDC1,0xBC81,0x7C40,
	0xB401,0x74C0,0x7580,0xB541,0x7700,0xB7C1,0xB681,0x7640,
	0x7200,0xB2C1,0xB381,0x7340,0xB101,0x71C0,0x7080,0xB041,
	0x5000,0x90C1,0x9181,0x5140,0x9301,0x53C0,0x5280,0x9241,
	0x9601,0x56C0,0x5780,0x9741,0x5500,0x95C1,0x9481,0x5440,
	0x9C01,0x5CC0,0x5D80,0x9D41,0x5F00,0x9FC1,0x9E81,0x5E40,
	0x5A00,0x9AC1,0x9B81,0x5B40,0x9901,0x59C0,0x5880,0x9841,
	0x8801,0x48C0,0x4980,0x8941,0x4B00,0x8BC1,0x8A81,0x4A40,
	0x4E00,0x8EC1,0x8F81,0x4F40,0x8D01,0x4DC0,0x4C80,0x8C41,
	0x4400,0x84C1,0x8581,0x4540,0x8701,0x47C0,0x4680,0x8641,
	0x8201,0x42C0,0x4380,0x8341,0x4100,0x81C1,0x8081,0x4040
};

ST_BYTE FromBCD_BYTE(ST_BYTE value)
{
	return ((value&0xf0)>>4)*10 + (value&0x0f);
}
ST_INT FromBCD_WORD(ST_INT value)
{
	return FromBCD_BYTE((value&0xff00)>>8)*100 + FromBCD_BYTE(value&0x00ff);
}
ST_INT FromBCD_DWORD(ST_UINT32 value)
{
	return FromBCD_WORD((ST_UINT)((value&0xffff0000)>>16))*10000 + FromBCD_WORD((ST_UINT)(value&0x0000ffff));
}
ST_BYTE TOBCD_BYTE(ST_BYTE value)
{
	return (ST_BYTE)(((value/10)<<4) + (value%10));
}
ST_UINT TOBCD_WORD(ST_INT value)
{
	return (ST_UINT)(TOBCD_BYTE(((value&0xff00)>>8)<<8) + TOBCD_BYTE(value&0x00ff));
}
ST_UINT32 TOBCD_DWORD(ST_INT value)
{
	return (ST_UINT32)(TOBCD_WORD(((value&0xffff0000)>>16)<<16)+ TOBCD_WORD(value&0x0000ffff));
}

ST_UINT GetCRC16(const ST_BYTE *pbData, ST_INT nSize)
{
	ST_UINT i;
	ST_UINT crc =0xffff;
	for (i =0; i < nSize; i++)
	{
		crc =m_crc16_table[(crc & 0xff) ^ (*pbData++)] ^ (crc >> 8);
	}
	return crc;
}

ST_BYTE StringToHex(ST_CHAR* pchar)
{
	ST_BYTE b1 = 0,b2 = 0;
	if(pchar[0] >= 'A' && pchar[0] <= 'F')
		b1 = pchar[0] - 'A' + 10;
	else if(pchar[0] >= 'a' && pchar[0] <= 'f')
		b1 = pchar[0] - 'a' + 10;
	else  if(pchar[0] >= '0' && pchar[0] <= '9')
		b1 = pchar[0] - '0';


	if(pchar[1] >= 'A' && pchar[1] <= 'F')
		b2 = pchar[1] - 'A' + 10;
	else if(pchar[1] >= 'a' && pchar[1] <= 'f')
		b2 = pchar[1] - 'a' + 10;
	else  if(pchar[1] >= '0' && pchar[1] <= '9')
		b2 = pchar[1] - '0';


	return (b1<<4) + b2;
}

CModbusRTU::CModbusRTU()
{
    //ctor
}

CModbusRTU::~CModbusRTU()
{
    //dtor
}

CModbusRTU* CreateInstace()
{
    return new CModbusRTU();
}

ST_BOOLEAN	CModbusRTU::IsSupportEngine(ST_INT engineType)
{
    return 1;
}

void	CModbusRTU::Init()
{
	m_bTask = false;
	m_curreadIndex = 0;
	m_readIndex = 0;
}

void	CModbusRTU::Uninit()
{

}
void	CModbusRTU::OnRead(ST_BYTE* pbuf,ST_INT& readed)
{
	readed = 0;
	if(m_curreadIndex < 0 || m_curreadIndex >= this->GetDevice()->GetDeviceInfo()->DataAreasCount)
	{
//		this->OnShowMsg("没有配置数据，端口接收取消",0);
		m_curreadIndex = 0;
		this->GetCurPort()->Clear();
		return;
	}
	if(this->GetCurPort())
	{
		ST_INT	len = this->GetCurPort()->PickBytes(pbuf,5,300);
		if(len >= 5)
		{
			ST_INT star = 0;
			for(star = 0;star < len;star++)
			{
				if(pbuf[star] == (ST_BYTE)this->GetDevice()->GetDeviceInfo()->Address)
					break;
			}
			if(star > 0)
			{
				//star大于0，说明有乱码， 把之前的乱码丢掉
				this->GetCurPort()->ReadBytes(pbuf,star);
			}
			if(star == len)
			{
				//全是乱码
//				this->ShowReceiveFrame(pbuf,len);
				this->GetCurPort()->Clear();
				return;
			}
			len = this->GetCurPort()->PickBytes(pbuf,5,100);
			ST_BYTE fuccode = pbuf[1 + star];
			if((fuccode&0xf0) == 0x80)
			{
				len = 5;
			}
			else if(fuccode == 0x05)
			{
				len = 8;
			}
			else if((fuccode == 0x06) && m_bTask)
			{
				len = m_curTask.taskParamLen + 6;
			}
			else if(fuccode == (ST_BYTE)this->GetDevice()->GetDeviceInfo()->DataAreas[m_curreadIndex].readCode)
			{
				//读数据返回
				ST_BYTE readCount = pbuf[2 + star];
				len = readCount + 5;
			}
			else if(fuccode == (ST_BYTE)this->GetDevice()->GetDeviceInfo()->DataAreas[m_curreadIndex].writeCode)
			{
				//写数据返回
				len = 8;
			}
			else
			{
//				this->ShowReceiveFrame(pbuf,len);
				this->GetCurPort()->Clear();
			}
			ST_INT nlen = this->GetCurPort()->PickBytes(pbuf,len,2000);
			if(nlen == len)
			{
				this->GetCurPort()->ReadBytes(pbuf,len);
				ST_UINT16 wCRC = GetCRC16(&pbuf[0],len-2);
				ST_INT nCRC = pbuf[len-2]+pbuf[len-1]*256;
				if(wCRC == nCRC)
				{
					readed  = len;
					return;
				}
				else
				{
//					this->OnShowMsg("校验错误!",0);
//					this->ShowReceiveFrame(pbuf,len);
					this->GetCurPort()->Clear();
					return ;
				}
			}
			else
			{
//				this->OnShowMsg("读取数据长度不够0!",0);
//				this->ShowReceiveFrame(pbuf,len);
				this->GetCurPort()->Clear();
			}
		}
		else
		{
//			this->OnShowMsg("读取数据长度不够1!",0);
//			this->ShowReceiveFrame(pbuf,len);
			this->GetCurPort()->Clear();
		}
	}
}
ST_BOOLEAN	CModbusRTU::OnSend()
{
	m_bTask = false;
	if(this->HasTask() && this->GetTask(&m_curTask))
	{
		if(!strcmp(m_curTask.taskCmd,"singleread"))
		{
			SendReadCmd((ST_BYTE)m_curTask.taskCmdCode,m_curTask.taskAddr,m_curTask.taskAddr1);
			m_bTask = true;
		}
		else if(!strcmp(m_curTask.taskCmd,"devicecontrol"))
		{
			if(m_curTask.taskCmdCode == 0)
				SendPreYK(m_curTask.taskAddr,m_curTask.taskAddr1);
			else if(m_curTask.taskCmdCode == 1)
				SendYK(m_curTask.taskAddr,m_curTask.taskAddr1);
			else if(m_curTask.taskCmdCode == 2)
				SendReadCmd((ST_BYTE)m_curTask.taskCmdCode,m_curTask.taskAddr,m_curTask.taskAddr1);
			else
			{
                m_curTask.taskResult.resultCode = 0;
                m_curTask.isTransfer = 1;
                Transfer(&m_curTask);
                memset(&m_curTask,0,sizeof(m_curTask));
				return false;
			}
			m_bTask = true;
		}
		else if(!strcmp(m_curTask.taskCmd,"singlewrite"))
		{
			if(m_curTask.taskCmdCode == 2)
			{
				ST_UINT16 wIndex = m_curTask.taskParam[1];
				wIndex = (wIndex<<8)| m_curTask.taskParam[0];
				SendYT(m_curTask.taskAddr,wIndex,m_curTask.taskValue?1:0);
			}
			else
				SendSingleWriteCmd((ST_FLOAT)m_curTask.taskValue,m_curTask.taskAddr,m_curTask.taskAddr1);
			m_bTask = true;
		}
		else if(!strcmp(m_curTask.taskCmd,"multiwrite"))
		{
			//写定值
			SendWriteCmd(m_curTask.taskParam,m_curTask.taskParamLen,m_curTask.taskAddr);
			m_bTask = true;

		}
		return true;
	}
	if(this->GetDevice()->GetDeviceInfo()->DataAreasCount > 0)
	{
		if(m_readIndex >= this->GetDevice()->GetDeviceInfo()->DataAreasCount)
			m_readIndex = 0;
		m_curreadIndex = m_readIndex;
		SendReadCmd(this->GetDevice()->GetDeviceInfo()->DataAreas[m_curreadIndex].readCode,
			       (ST_UINT16)this->GetDevice()->GetDeviceInfo()->DataAreas[m_curreadIndex].addr,
			       this->GetDevice()->GetDeviceInfo()->DataAreas[m_curreadIndex].dataUnitLen > 1?this->GetDevice()->GetDeviceInfo()->DataAreas[m_curreadIndex].len/this->GetDevice()->GetDeviceInfo()->DataAreas[m_curreadIndex].dataUnitLen:this->GetDevice()->GetDeviceInfo()->DataAreas[m_curreadIndex].len);
		m_readIndex++;
	}
	return true;
}
ST_BOOLEAN	CModbusRTU::OnProcess(ST_BYTE* pbuf,ST_INT len)
{
	if(m_bTask)
	{
		if(!strcmp(m_curTask.taskCmd,"singlewrite") || !strcmp(m_curTask.taskCmd,"multiwrite"))
		{
			m_curTask.taskResult.resultCode = 0;
            m_curTask.isTransfer = 1;
            Transfer(&m_curTask);
			memset(&m_curTask,0,sizeof(m_curTask));
			return true;
		}
		else if(!strcmp(m_curTask.taskCmd,"devicecontrol"))
		{
			m_curTask.taskResult.resultCode = 0;
            m_curTask.isTransfer = 1;
            Transfer(&m_curTask);
			memset(&m_curTask,0,sizeof(m_curTask));
			return true;
		}
		else if(!strcmp(m_curTask.taskCmd,"singleread"))
		{
			m_curTask.taskResult.resultCode = 0;
			m_curTask.taskResult.resultDataLen = pbuf[2];
			memcpy(m_curTask.taskResult.resultData,&pbuf[3],m_curTask.taskResult.resultDataLen);
            m_curTask.isTransfer = 1;
            Transfer(&m_curTask);
			memset(&m_curTask,0,sizeof(m_curTask));
			return true;
		}
		else
		{
			m_curTask.taskResult.resultCode = 0;
            m_curTask.isTransfer = 1;
            Transfer(&m_curTask);
			memset(&m_curTask,0,sizeof(m_curTask));
			return true;
		}
	}
	else if(m_curreadIndex >= 0 && m_curreadIndex < this->GetDevice()->GetDeviceInfo()->DataAreasCount && pbuf[1] == (ST_BYTE)this->GetDevice()->GetDeviceInfo()->DataAreas[m_curreadIndex].readCode)
	{
		ST_BYTE count = pbuf[2];
		ProcessMemory(&pbuf[3],count);
	}
	return true;
}

void CModbusRTU::ProcessMemory(ST_BYTE* buf,ST_BYTE count)
{
    ST_DeviceDataArea *devicedataareas = this->GetDevice()->GetDeviceInfo()->DataAreas;
    ST_DeviceDataArea& devicedataarea = devicedataareas[m_curreadIndex];
	for(ST_INT k = 0;k < devicedataarea.itemCount;k++)
	{
		if(count >= (devicedataarea.items[k].addr + devicedataarea.items[k].dataLen))
		{
			switch(devicedataarea.items[k].dataType)
			{
			case 0:
				ProcessMemorySByte(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 1:
				ProcessMemoryInt16(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 2:
				ProcessMemoryInt32(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 3:
				ProcessMemoryByte(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 4:
				ProcessMemoryUInt16(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 5:
				ProcessMemoryUInt32(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 6:
				ProcessMemorySingle(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 7:
				ProcessMemoryBoolean(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 8:
				ProcessMemoryString(&devicedataarea,buf,m_curreadIndex,k);
				break;
            case 9:
				ProcessMemoryBytes(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 10:
				ProcessMemoryDouble(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 11:
				ProcessMemoryDecimal(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 12:
				ProcessMemoryDateTime(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 13:
				ProcessMemoryInt64(&devicedataarea,buf,m_curreadIndex,k);
				break;
			case 14:
				ProcessMemoryUInt64(&devicedataarea,buf,m_curreadIndex,k);
				break;
			default:
				break;
			}
		}
	}
}

void  CModbusRTU::ProcessMemorySByte(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{
	if(devicedataarea->items[k].dataLen == 1)
	{
		ST_BYTE value = *(buf + devicedataarea->items[k].addr);
		if(devicedataarea->items[k].endBit - devicedataarea->items[k].beginBit < 7)
		{
			value  = (value&(0xff<<(devicedataarea->items[k].beginBit -1)))&(0xff>>(8 - devicedataarea->items[k].endBit));
			value = value>>(devicedataarea->items[k].beginBit - 1);
		}
		if(devicedataarea->items[k].coeficient < 0)
		{
			value = !value;
		}
		this->UpdateValue(devicedataarea->items[k].id,(ST_BYTE)value);
		//this->UpdateValue(k,(ST_BYTE)value);
	}
	else if(devicedataarea->items[k].dataLen == 2)
	{
		ST_INT16 value = 0x0000;
		if((devicedataarea->items[k].codeType == 1))
		{
			value = htons_(*(ST_INT16*)(buf + devicedataarea->items[k].addr));
		}
		else
		{
			value = *(ST_INT16*)(buf + devicedataarea->items[k].addr);
		}
		if(devicedataarea->items[k].endBit - devicedataarea->items[k].beginBit < 15)
		{
			value  = (value&(0xffff<<(devicedataarea->items[k].beginBit -1)))&(0xffff>>(16 - devicedataarea->items[k].endBit));
			value = value>>(devicedataarea->items[k].beginBit - 1);
		}
		if(devicedataarea->items[k].coeficient < 0)
		{
			value = !value;
		}
		this->UpdateValue(devicedataarea->items[k].id,(ST_BYTE)value);
		//this->UpdateValue(k,(ST_BYTE)value);
	}
}

void  CModbusRTU::ProcessMemoryInt16(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{
	ST_FLOAT fvalue = 0;
	if(devicedataarea->items[k].dataLen == 1)
	{
		ST_BYTE value = *(buf + devicedataarea->items[k].addr);
		if((devicedataarea->items[k].codeType == 2) || (devicedataarea->items[k].codeType == 3))
		{
			fvalue = FromBCD_BYTE(value);
		}
		else fvalue  = (ST_FLOAT)(*((ST_SHORT*)&value));
	}
	else if(devicedataarea->items[k].dataLen == 2)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT16 value = FromBCD_WORD(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(*((ST_SHORT*)&value));
		}
		else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT16 value = FromBCD_WORD(htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_FLOAT)(*((ST_SHORT*)&value));
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT16 value = *(ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_FLOAT)(*((ST_SHORT*)&value));
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT16 value = htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(*((ST_SHORT*)&value));
		}
	}
	else if(devicedataarea->items[k].dataLen == 4)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT16 value = FromBCD_DWORD(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(*((ST_LONG*)&value));
		}
        else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT16 value = FromBCD_DWORD(htonl2(*(ST_UINT16*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_FLOAT)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT16 value = *(ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_FLOAT)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT16 value = htonl2(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 4))
		{
			ST_UINT32 value = htonl1(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 5))
		{
			ST_UINT32 value = htonl0(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 6))
		{
			ST_UINT16* dvalue = (ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_FLOAT)(dvalue[1]*10000 + dvalue[0]);
		}
	}
	else if(devicedataarea->items[k].dataLen == 8)
	{
		if((devicedataarea->items[k].codeType == 10))
		{
			ST_UINT16* dvalue = (ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_FLOAT)(htons_(dvalue[3])*1000000000000 + htons_(dvalue[2])*100000000 + htons_(dvalue[1])*10000 + htons_(dvalue[0]));
		}
	}
	if(devicedataarea->items[k].coeficient != 0)
	{
		fvalue = fvalue*devicedataarea->items[k].coeficient;
	}
	this->UpdateValue(devicedataarea->items[k].id,fvalue);
	//this->UpdateValue(k,fvalue);
}

void  CModbusRTU::ProcessMemoryInt32(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{
	ST_DOUBLE fvalue = 0;
	if(devicedataarea->items[k].dataLen == 1)
	{
		ST_BYTE value = *(buf + devicedataarea->items[k].addr);
		if((devicedataarea->items[k].codeType == 2) ||
			    (devicedataarea->items[k].codeType == 3))
		{
			fvalue = FromBCD_BYTE(value);
		}
		else fvalue  = (ST_DOUBLE)(*((ST_SHORT*)&value));
	}
	else if(devicedataarea->items[k].dataLen == 2)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT16 value = FromBCD_WORD(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(*((ST_SHORT*)&value));
		}
		else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT16 value = FromBCD_WORD(htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_DOUBLE)(*((ST_SHORT*)&value));
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT16 value = *(ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_DOUBLE)(*((ST_SHORT*)&value));
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT16 value = htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(*((ST_SHORT*)&value));
		}
	}
	else if(devicedataarea->items[k].dataLen == 4)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT32 value = FromBCD_DWORD(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(*((ST_LONG*)&value));
		}
        else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT32 value = FromBCD_DWORD(htonl2(*(ST_UINT32*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_DOUBLE)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT32 value = *(ST_UINT32*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_DOUBLE)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT32 value = htonl2(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 4))
		{
			ST_UINT32 value = htonl1(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 5))
		{
			ST_UINT32 value = htonl0(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 6))
		{
			ST_UINT16* pbcdvalue = (ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_DOUBLE)(pbcdvalue[1]*10000 + pbcdvalue[0]);
		}
	}
	else if(devicedataarea->items[k].dataLen == 8)
	{
		if((devicedataarea->items[k].codeType == 10))
		{
			ST_UINT16* pbcdvalue = (ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_DOUBLE)(htons_(pbcdvalue[3])*1000000000000 + htons_(pbcdvalue[2])*100000000 + htons_(pbcdvalue[1])*10000 + htons_(pbcdvalue[0]));
		}
	}
	if(devicedataarea->items[k].coeficient != 0)
	{
		fvalue = fvalue*devicedataarea->items[k].coeficient;
	}
	this->UpdateValue(devicedataarea->items[k].id,fvalue);
	//this->UpdateValue(k,fvalue);
}

void  CModbusRTU::ProcessMemoryByte(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{
	ProcessMemorySByte(devicedataarea,buf,ncurreadIndex,k);
}

void  CModbusRTU::ProcessMemoryUInt16(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{
	ST_FLOAT fvalue = 0;
	if(devicedataarea->items[k].dataLen == 1)
	{
		ST_BYTE value = *(buf + devicedataarea->items[k].addr);
		if((devicedataarea->items[k].codeType == 2) ||
			    (devicedataarea->items[k].codeType == 3))
		{
			fvalue = FromBCD_BYTE(value);
		}
		else fvalue  = (ST_FLOAT)(value);
	}
	else if(devicedataarea->items[k].dataLen == 2)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT16 value = FromBCD_WORD(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(value);
		}
		else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT16 value = FromBCD_WORD(htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_FLOAT)(value);
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT16 value = *(ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_FLOAT)(value);
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT16 value = htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(value);
		}
	}
	else if(devicedataarea->items[k].dataLen == 4)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT32 value = FromBCD_DWORD(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(value);
		}
        else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT32 value = FromBCD_DWORD(htonl2(*(ST_UINT32*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_FLOAT)(value);
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT32 value = *(ST_UINT32*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_FLOAT)(value);
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT32 value = htonl2(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(value);
		}
		else if((devicedataarea->items[k].codeType == 4))
		{
			ST_UINT32 value = htonl1(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(value);
		}
		else if((devicedataarea->items[k].codeType == 5))
		{
			ST_UINT32 value = htonl0(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT)(value);
		}
		else if((devicedataarea->items[k].codeType == 6))
		{
			ST_UINT16* pbcdvalue = (ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_FLOAT)(pbcdvalue[1]*10000 + pbcdvalue[0]);
		}
	}
	else if(devicedataarea->items[k].dataLen == 8)
	{
		if((devicedataarea->items[k].codeType == 10))
		{
			ST_UINT16* pbcdvalue = (ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_FLOAT)(htons_(pbcdvalue[3])*1000000000000 + htons_(pbcdvalue[2])*100000000 + htons_(pbcdvalue[1])*10000 + htons_(pbcdvalue[0]));
		}
	}
	if(devicedataarea->items[k].coeficient != 0)
	{
		fvalue = fvalue*devicedataarea->items[k].coeficient;
	}
 //   m_pLogger->LogDebug("k = %d,(ST_FLOAT)(value) = %f",k,fvalue);
	this->UpdateValue(devicedataarea->items[k].id,fvalue);
	//this->UpdateValue(k,fvalue);
}

void  CModbusRTU::ProcessMemoryUInt32(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{
	ST_DOUBLE fvalue = 0;
	if(devicedataarea->items[k].dataLen == 1)
	{
		ST_BYTE value = *(buf + devicedataarea->items[k].addr);
		if((devicedataarea->items[k].codeType == 2) ||
			    (devicedataarea->items[k].codeType == 3))
		{
			fvalue = FromBCD_BYTE(value);
		}
		else fvalue  = (ST_DOUBLE)(value);
	}
	else if(devicedataarea->items[k].dataLen == 2)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT16 value = FromBCD_WORD(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(value);
		}
		else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT16 value = FromBCD_WORD(htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_DOUBLE)(value);
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT16 value = *(ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_DOUBLE)(value);
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT16 value = htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(value);
		}
	}
	else if(devicedataarea->items[k].dataLen == 4)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT32 value = FromBCD_DWORD(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(value);
		}
        else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT32 value = FromBCD_DWORD(htonl2(*(ST_UINT32*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_DOUBLE)(value);
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT32 value = *(ST_UINT32*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_DOUBLE)(value);
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT32 value = htonl2(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(value);
		}
		else if((devicedataarea->items[k].codeType == 4))
		{
			ST_UINT32 value = htonl1(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(value);
		}
		else if((devicedataarea->items[k].codeType == 5))
		{
			ST_UINT32 value = htonl0(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE)(value);
		}
		else if((devicedataarea->items[k].codeType == 6))
		{
			ST_UINT16* pbcdvalue = (ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_DOUBLE)(pbcdvalue[1]*10000 + pbcdvalue[0]);
		}
	}
	else if(devicedataarea->items[k].dataLen == 8)
	{
		if((devicedataarea->items[k].codeType == 10))
		{
			ST_UINT16* pbcdvalue = (ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_DOUBLE)(htons_(pbcdvalue[3])*1000000000000 + htons_(pbcdvalue[2])*100000000 + htons_(pbcdvalue[1])*10000 + htons_(pbcdvalue[0]));
		}
	}
	if(devicedataarea->items[k].coeficient != 0)
	{
		fvalue = fvalue*devicedataarea->items[k].coeficient;
	}
	this->UpdateValue(devicedataarea->items[k].id,fvalue);
	//this->UpdateValue(k,fvalue);
}

void  CModbusRTU::ProcessMemorySingle(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{
	ST_FLOAT fvalue = 0;
	if(devicedataarea->items[k].dataLen == 1)
	{
		ST_BYTE value = *(buf + devicedataarea->items[k].addr);
		if((devicedataarea->items[k].codeType == 2) ||
			    (devicedataarea->items[k].codeType == 3))
		{
			fvalue = FromBCD_BYTE(value);
		}
		else fvalue  = (ST_FLOAT&)(*((ST_SHORT*)&value));
	}
	else if(devicedataarea->items[k].dataLen == 2)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT16 value = FromBCD_WORD(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT&)(*((ST_SHORT*)&value));
		}
		else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT16 value = FromBCD_WORD(htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_FLOAT&)(*((ST_SHORT*)&value));
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT16 value = *(ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_FLOAT&)(*((ST_SHORT*)&value));
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT16 value = htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT&)(*((ST_SHORT*)&value));
		}
	}
	else if(devicedataarea->items[k].dataLen == 4)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT32 value = FromBCD_DWORD(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT&)(*((ST_LONG*)&value));
		}
        else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT32 value = FromBCD_DWORD(htonl2(*(ST_UINT32*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_FLOAT&)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT32 value = *(ST_UINT32*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_FLOAT&)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT32 value = htonl2(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT&)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 4))
		{
			ST_UINT32 value = htonl1(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT&)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 5))
		{
			ST_UINT32 value = htonl0(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT&)(*((ST_LONG*)&value));
		}
	}
	if(devicedataarea->items[k].coeficient != 0)
	{
		fvalue = fvalue*devicedataarea->items[k].coeficient;
	}
	this->UpdateValue(devicedataarea->items[k].id,fvalue);
	//this->UpdateValue(k,fvalue);
}

void  CModbusRTU::ProcessMemoryBoolean(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{

}

void  CModbusRTU::ProcessMemoryString(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{

}

void  CModbusRTU::ProcessMemoryBytes(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{

}

void  CModbusRTU::ProcessMemoryDouble(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{
	ST_DOUBLE fvalue = 0;
	if(devicedataarea->items[k].dataLen == 1)
	{
		ST_BYTE value = *(buf + devicedataarea->items[k].addr);
		if((devicedataarea->items[k].codeType == 2) ||
			    (devicedataarea->items[k].codeType == 3))
		{
			fvalue = FromBCD_BYTE(value);
		}
		else fvalue  = (ST_DOUBLE&)(*((ST_LONG*)&value));
	}
	else if(devicedataarea->items[k].dataLen == 2)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT16 value = FromBCD_WORD(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE&)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT16 value = FromBCD_WORD(htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_DOUBLE&)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT16 value = *(ST_UINT16*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_DOUBLE&)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT16 value = htons_(*(ST_UINT16*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE&)(*((ST_LONG*)&value));
		}
	}
	else if(devicedataarea->items[k].dataLen == 4)
	{
		if((devicedataarea->items[k].codeType == 2))
		{
			ST_UINT32 value = FromBCD_DWORD(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_DOUBLE&)(*((ST_LONG*)&value));
		}
        else if((devicedataarea->items[k].codeType == 3))
		{
			ST_UINT32 value = FromBCD_DWORD(htonl2(*(ST_UINT32*)(buf + devicedataarea->items[k].addr)));
			fvalue = (ST_DOUBLE&)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 0))
		{
			ST_UINT32 value = *(ST_UINT32*)(buf + devicedataarea->items[k].addr);
			fvalue = (ST_DOUBLE&)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 1))
		{
			ST_UINT32 value = htonl2(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT&)(*((ST_LONG*)&value));
		}
		else if((devicedataarea->items[k].codeType == 4))
		{
			ST_UINT32 value = htonl1(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT&)(*((ST_LONG*)&value));

		}
		else if((devicedataarea->items[k].codeType == 5))
		{
			ST_UINT32 value = htonl0(*(ST_UINT32*)(buf + devicedataarea->items[k].addr));
			fvalue = (ST_FLOAT&)(*((ST_LONG*)&value));
		}
	}
	if(devicedataarea->items[k].coeficient != 0)
	{
		fvalue = fvalue*devicedataarea->items[k].coeficient;
	}
	this->UpdateValue(devicedataarea->items[k].id,fvalue);
	//this->UpdateValue(k,fvalue);
}

void  CModbusRTU::ProcessMemoryDecimal(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{

}

void  CModbusRTU::ProcessMemoryDateTime(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{

}

void  CModbusRTU::ProcessMemoryInt64(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{

}

void  CModbusRTU::ProcessMemoryUInt64(ST_DeviceDataArea *devicedataarea,ST_BYTE* buf,ST_INT ncurreadIndex,ST_INT k)
{

}

void CModbusRTU::SendReadCmd(ST_BYTE code,ST_UINT readAddr,ST_UINT count)
{
	ST_BYTE sendbuf[8];
	sendbuf[0] = (ST_BYTE)this->GetDevice()->GetDeviceInfo()->Address;
	sendbuf[1] = code;
	FillWORD(sendbuf + 2,readAddr);
	FillWORD(sendbuf + 4,count);
	*(ST_UINT16*)(sendbuf + 6) = GetCRC16(sendbuf,6);
	this->Send(sendbuf,8);
}

void CModbusRTU::SendYK(ST_UINT writeAddr,ST_BOOLEAN bIsOn)
{
	ST_BYTE sendbuf[256];
	ST_INT len = 0;
	sendbuf[0] = (ST_BYTE)this->GetDevice()->GetDeviceInfo()->Address;
	sendbuf[1] = 0x05;
	FillWORD(sendbuf + 2,writeAddr);
	sendbuf[4] = 0xFF;
	sendbuf[5] = 0x00;
	*(ST_UINT16*)(sendbuf + 6) = GetCRC16(sendbuf,6);
	this->Send(sendbuf,8);

}

void CModbusRTU::SendPreYK(ST_UINT writeAddr,ST_BOOLEAN bIsOn)
{
	ST_BYTE sendbuf[256];
	ST_INT len = 0;
	sendbuf[0] = (ST_BYTE)this->GetDevice()->GetDeviceInfo()->Address;
	sendbuf[1] = 0x05;
	sendbuf[2] = 0x1f;
	if(bIsOn)
		sendbuf[3] = 0x11;
	else
		sendbuf[3] = 0x10;
	sendbuf[4] = 0xFF;
	sendbuf[5] = 0x00;
	*(ST_UINT16*)(sendbuf + 6) = GetCRC16(sendbuf,6);
	this->Send(sendbuf,8);
}

void CModbusRTU::SendYT(ST_UINT writeAddr,ST_UINT wIndex,ST_BOOLEAN bIsOn)
{
	ST_BYTE sendbuf[256];
	ST_INT len = 0;
	sendbuf[0] = (ST_BYTE)this->GetDevice()->GetDeviceInfo()->Address;
	sendbuf[1] = 0x05;
	FillWORD(sendbuf + 2,writeAddr);
	if(bIsOn)
		sendbuf[4] = 0xFF;
	else
		sendbuf[4] = 0x00;
	sendbuf[5] = 0x00;
	*(ST_UINT16*)(sendbuf + 6) = GetCRC16(sendbuf,6);
	this->Send(sendbuf,8);

}
void  CModbusRTU::SendSingleWriteCmd(ST_FLOAT data,ST_INT readAddr,ST_INT nType)
{
//	this->OnShowMsg("-----------------------------------------设置单点值",0);
	ST_BYTE sendbuf[256];
	ST_INT len = 0;

	if(nType == 0) //两个字节WORD
	{
		sendbuf[0] = (ST_BYTE)this->GetDevice()->GetDeviceInfo()->Address;
		sendbuf[1] = 0x06;
		FillWORD(sendbuf + 2,readAddr);
		FillWORD(sendbuf + 4,data);
		len = 6;
		*(ST_UINT16*)(sendbuf + len) = GetCRC16(sendbuf,len);
		this->Send(sendbuf,len + 2);
	}
	else if(nType == 1)//DWORD
	{
		sendbuf[0] = (ST_BYTE)this->GetDevice()->GetDeviceInfo()->Address;
		sendbuf[1] = 0x06;
		FillWORD(sendbuf + 2,readAddr);
		ST_UINT32 dwTmep = (ST_UINT32)data;
		sendbuf[4] = (dwTmep&0x0000ff00)>>8;
		sendbuf[5] = (dwTmep&0x000000ff);
		sendbuf[6] = (dwTmep&0xff000000)>>24;
		sendbuf[7] = (dwTmep&0x00ff0000)>>16;
		len = 8;
		*(ST_UINT16*)(sendbuf + len) = GetCRC16(sendbuf,len);
		this->Send(sendbuf,10);
	}
	else if(nType == 2)//float
	{
		sendbuf[0] = (ST_BYTE)this->GetDevice()->GetDeviceInfo()->Address;
		sendbuf[1] = 0x10;
		FillWORD(sendbuf + 2,readAddr);
		ST_BYTE bTemp[4];
		memcpy(&bTemp[0],&data,sizeof(ST_FLOAT));
		sendbuf[4] = 0x00;
		sendbuf[5] = 0x02;
		sendbuf[6] = 0x04;
		sendbuf[7] = bTemp[1];
		sendbuf[8] = bTemp[0];
		sendbuf[9] = bTemp[3];
		sendbuf[10] = bTemp[2];
		len = 11;
		*(ST_UINT16*)(sendbuf + len) = GetCRC16(sendbuf,len);
		this->Send(sendbuf,13);
	}
}

void  CModbusRTU::SendWriteCmd(ST_UCHAR* pData,ST_UINT dataLen,ST_UINT addr)
{
	if((dataLen>=1024) || (dataLen<=0)) return;
	ST_BYTE sendbuf[1024];
	for(ST_INT i=0;i<1024;i++)
		sendbuf[i] = 0xff;
	ST_INT len = 0;
	ST_INT ndataLen = (dataLen%2)?(dataLen/2+1):(dataLen/2);
	sendbuf[0] = (ST_BYTE)this->GetDevice()->GetDeviceInfo()->Address;
	sendbuf[1] = 0x10;
	FillWORD(sendbuf + 2,addr);
	FillWORD(sendbuf + 4,ndataLen);
	sendbuf[6] = ndataLen*2;
	memcpy(sendbuf + 7,pData,dataLen);
	len = 7 + ndataLen*2;
	*(ST_UINT16*)(sendbuf + len) = GetCRC16(sendbuf,len);
	this->Send(sendbuf,len + 2);
}

void CModbusRTU::FillWORD(ST_BYTE* buf,ST_UINT v)
{
	ST_BYTE* pv = (ST_BYTE*)&v;
	buf[0] = pv[1];
	buf[1] = pv[0];
}

ST_UINT CModbusRTU::htons_(ST_UINT v)
{
	ST_UINT16 wTemp = v&0x00ff;
	return ((wTemp<<8)|((v&0xff00)>>8));
}


ST_UINT CModbusRTU::GetAppWORDValue(ST_UINT v,ST_INT codetype)
{
	if(codetype == 1 || codetype == 4)
	{
		return htons_(v);
	}
	else if(codetype == 2)
	{
		return FromBCD_WORD(v);
	}
	return v;
}

ST_LONG CModbusRTU::htonl0(ST_UINT dv)
{
	ST_UINT16 dwHTemp = (ST_UINT16)((dv&0xffff0000)>>16);
	ST_UINT16 dwLTemp = (ST_UINT16)(dv&0x0000ffff);
 	ST_UINT32 dwTemp = dwLTemp;
	return ((dwTemp<<16)|dwHTemp);
}

ST_LONG CModbusRTU::htonl1(ST_UINT dv)
{
	ST_UINT16 dwHTemp = (ST_UINT16)((dv&0xffff0000)>>16);
	ST_UINT16 dwLTemp = (ST_UINT16)(dv&0x0000ffff);
	ST_UINT16 wLTemp  = htons_(dwLTemp);
	ST_UINT16 wHTemp  = htons_(dwHTemp);
	ST_UINT32 dwTemp = wHTemp;
	return ((dwTemp<<16)|wLTemp);
}

ST_LONG CModbusRTU::htonl2(ST_UINT dv)
{
	ST_UINT16 dwHTemp = (ST_UINT16)((dv&0xffff0000)>>16);
	ST_UINT16 dwLTemp = (ST_UINT16)(dv&0x0000ffff);
	ST_UINT16 wLTemp  = htons_(dwLTemp);
	ST_UINT16 wHTemp  = htons_(dwHTemp);
	ST_UINT32 dwTemp = wLTemp;
	return ((dwTemp<<16)|wHTemp);
}

void  CModbusRTU::SendWriteCmd(ST_UCHAR* pData,ST_UINT dataLen)
{
	ST_BYTE sendframe[1024];
	if(dataLen>=1024) return;
	for(ST_INT i=0;i<dataLen;i++)
	{
		sendframe[i] = pData[i];
	}
	this->Send(sendframe,dataLen);
}

void  CModbusRTU::SendWriteCmdHex(ST_UCHAR* pData,ST_UINT dataLen)
{
/*	ST_BYTE sendframe[1024];
	if(dataLen>=1024) return;
	CString strTemp = "";
	ST_INT nIndex = 0;
	ST_CHAR ctemp[2];
	ST_BYTE byTemp=0x00;
	ST_BYTE byValue =0x00;
	for(ST_INT i=0;i<dataLen;i++)
	{
		if(pData[i] != ' ' )
		{
			strTemp += pData[i];
		}
		else
		{
			strTemp.TrimLeft();
			strTemp.TrimRight();
			strTemp.MakeUpper();
			if(strTemp != "")
			{
				memcpy(&ctemp[0],strTemp,2);
				if (ctemp[0] < 0x41) byTemp = ctemp[0] - 0x30;
				else byTemp = ctemp[0] - 0x41 + 0xa;
				byValue = byTemp << 4;
				if (ctemp[1] < 0x41) byTemp = ctemp[1] - 0x30;
				else byTemp = ctemp[1] - 0x41 + 0xa;
				byValue += byTemp;
				sendframe[nIndex++] = byValue;
			}
			strTemp = "";
		}
	}
    strTemp.MakeUpper();
	memcpy(&ctemp[0],strTemp,2);
	if (ctemp[0] < 0x41) byTemp = ctemp[0] - 0x30;
	else byTemp = ctemp[0] - 0x41 + 0xa;
	byValue = byTemp << 4;
	if (ctemp[1] < 0x41) byTemp = ctemp[1] - 0x30;
	else byTemp = ctemp[1] - 0x41 + 0xa;
	byValue += byTemp;
	sendframe[nIndex++] = byValue;

	this->Send(sendframe,nIndex);*/
}


